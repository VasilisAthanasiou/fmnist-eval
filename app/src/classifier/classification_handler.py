from src.classifier.mnist_classifier import *
import cv2 as cv
from matplotlib import pyplot as plt
import matplotlib
matplotlib.use('Agg')

# -------------------------------------------------------------------- Load saved model ---------------------------------------------------------------------- #

def load_fmnist_model(model='classic'):
    """
    Either load the classic Sequential model consisting of Dense layers only, or use Convolutional Model
    :param model: Either 'classic' or 'cnn'
    :return: tf.keras.models object
    """
    if model == 'classic':
        return tf.keras.models.load_model('data/trained_net')
    elif model == 'cnn':
        return tf.keras.models.load_model('data/trained_cnn')

# ------------------------------------------------------------------------------------------------------------------------------------------------------------ #

# -------------------------------------------------------------------- Pre-process image --------------------------------------------------------------------- #

def process_image(path):
    """
    Process image so that it has similar features to the original F-MNIST dataset
    :param path: Path to image
    :return: Processed image
    """
    print(path)
    if path:
        # Read image
        image = cv.imread(path)

        # Convert to grayscale
        gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
        # Resize to 28x28
        resized = cv.resize(gray, (28, 28))
        result = (255-resized)
        # result = np.reshape(resized, (1, 28, 28))
        print('Did not process')
        result = np.reshape(resized, (1, 28, 28, 1))

        return result

    return None
# ------------------------------------------------------------------------------------------------------------------------------------------------------------ #

# ------------------------------------------------- Handle Top Search Results -------------------------------------------------------------------------------- #
def rank_images():
    """
    Randomly assign a rank to each image in the training data and sort the data based on that score so that we can later extract the top images from each class
    :return: A map (list) of (label, image, score) for all training data
    """
    images, labels, _, _ = load_dataset(normalize=False)
    scores = np.random.randint(101, size=len(images))  # Assign random scores for images from 0 to 100
    data = list(zip(labels, images, scores))
    data = sorted(data, key=lambda x: x[2])

    # Initialize map
    img_map = []
    for i in range(10):
        img_map.append([])

    for elem in data:
        img_map[elem[0]].append(elem)

    return img_map

def top_k_images(img_map, category, n=5):
    """
    Get the top n images from a selected category of images
    :param img_map: List generated by rank_images()
    :param category: Category from which we want the top n images
    :param n: Number of desired images to display
    :return: List of n top images in category
    """
    res = []
    for i in range(1, n + 1):
        res.append(img_map[category][-i][1])
    return res

def save_top_images(images, name):
    """
    Create a pyplot figure of the top n images extracted from top_k_images and save an image of it in app/data/static/'image-name'
    :param images: Images from top_k_images
    :param name: The name we want the top images file to have
    :return: None
    """
    for i in range(len(images)):
        # plt.subplot(331 + i)
        plt.subplot(len(images) // 4, 5, i + 1)
        plt.imshow(images[i], cmap=plt.get_cmap('gray'))
    plt.savefig('data/static/{}'.format(name))
    plt.close()
# ------------------------------------------------------------------------------------------------------------------------------------------------------------ #

